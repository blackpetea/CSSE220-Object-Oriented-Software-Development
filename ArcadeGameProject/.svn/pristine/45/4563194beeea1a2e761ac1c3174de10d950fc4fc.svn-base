import java.awt.Color;
import java.awt.Dimension;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.List;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * A simulation of the centipede game
 * 
 * @author Curt Clifton, Tengji Zhang. Created Feb 2, 2016.
 */
public class GameWorld implements GameEnvironment, Drawable, Temporal {
	private static final long UPDATE_INTERVAL_MS = 10;
	private final int width = 480;
	private final int height = 640;
	private boolean isBeginning = true;

	private ArrayList<Creature> creatures = new ArrayList<Creature>();
	private ArrayList<Creature> creaturesToAdd = new ArrayList<Creature>();
	private ArrayList<Creature> creaturesToRemove = new ArrayList<Creature>();

	private boolean isPaused = false;
	private Hero hero;
	private Level level;
	private BOSS BOSS;

	private Lock changeLock;
	private Condition condition;

	private Player playerOne;
	private Player playerTwo;
	private int currentPlayer;

	/**
	 * Constructs a new world that has the given dimensions and the given
	 * background color.
	 * 
	 * @param width
	 * @param height
	 * @param color
	 */
	public GameWorld() {
		this.playerOne = new Player(1);
		this.playerTwo = new Player(2);
		this.currentPlayer = 1;

		this.level = new Level();
		this.changeLock = new ReentrantLock();
		this.condition = this.changeLock.newCondition();

		// Render the map
		this.renderLevel();

		// Creates a separate "thread of execution" to inform this world of the
		// passage of time.
		Runnable tickTock = new Runnable() {
			@Override
			public void run() {
				try {
					while (true) {
						Thread.sleep(UPDATE_INTERVAL_MS);
						timePassed();
					}
				} catch (InterruptedException exception) {
					// Stop when interrupted
				}
			}
		};
		new Thread(tickTock).start();

		MonsterGenerator monClock = new MonsterGenerator(this);
		new Thread(monClock).start();
	}

	public Player getCurrentPlayer() {
		if (this.currentPlayer % 2 == 1) {
			return this.playerOne;
		} else {
			return this.playerTwo;
		}
	}

	public BOSS getBOSS() {
		return this.BOSS;
	}

	public ArrayList<Creature> getCreatures() {
		return this.creatures;
	}

	public Hero getHero() {
		return this.hero;
	}

	public Level getlevel() {
		return this.level;
	}

	/**
	 * 
	 * Detect if there is ceature collided.
	 *
	 */
	public synchronized void isCollision() {
		try {
			for (Creature a : this.creatures) {
				for (Creature b : this.creatures) {
					if (!a.equals(b) && a != null && b != null) {
						double distance = a.getCenterPoint().distance(b.getCenterPoint());
						double touch = a.getDiameter() + b.getDiameter();
						if (distance < touch / 2) {
							a.collide(b);
							b.collide(a);
						}
					}
				}
			}
		} catch (ConcurrentModificationException ex) {
			// do nothing
		}
	}

	private void generateCentipede(int j) {
		for (int i = 0; i < 10; i++) {
			this.addCreature(new Centipede(this, new Point2D.Double(20 * i + 20 * j, 10), this.level));
		}
	}

	private void generateBoss() {
		this.BOSS = new BOSS(this, new Point2D.Double(240, 200));
		this.addCreature(this.BOSS);
	}

	private void changePlayer() {
		if (this.hero.isAlive() == false) {
			this.currentPlayer += 1;
			Hero oldHero = this.hero;
			this.hero.die();
			this.renderLevel();
		}
	}

	// -------------------------------------------------------------------------
	// GameEnvironment interface

	@Override
	public synchronized void addCreature(Creature creature) {
		this.creaturesToAdd.add(creature);
	}

	@Override
	public synchronized void removeCreature(Creature creature) {
		this.creaturesToRemove.add(creature);
	}

	@Override
	public synchronized Creature nearestCreature(Point2D point) {
		Creature nearest = null;
		double nearestDistance = Double.MAX_VALUE;
		for (Creature b : this.creatures) {
			double distance = point.distance(b.getCenterPoint());
			if (distance < nearestDistance) {
				nearestDistance = distance;
				nearest = b;
			}
		}
		return nearest;
	}

	@Override
	public boolean isInsideWorldX(Point2D point) {
		return point.getX() >= 0 && point.getX() <= this.width;
	}

	@Override
	public boolean isInsideWorldY(Point2D point) {
		return point.getY() >= 0 && point.getY() <= this.height;
	}

	@Override
	public boolean isInsideWorld(Point2D point) {
		return isInsideWorldX(point) && isInsideWorldY(point);
	}

	@Override
	public Dimension getSize() {
		return new Dimension(this.width, this.height);
	}

	@Override
	public synchronized List<Drawable> getDrawableParts() {
		return new ArrayList<Drawable>(this.creatures);
	}

	@Override
	public Point2D getCenterPoint() {
		double x = this.width / 2;
		double y = this.height / 2;
		return new Point2D.Double(x, y);
	}

	public synchronized void renderLevel() {
		this.changeLock.lock();
		ArrayList<String> map;
		try {
			map = FileHandler.getFile("Files/" + "Level" + this.level.getlevel());
			this.creatures.clear();
			for (int i = 0; i < map.size(); i++) {
				String current = map.get(i);
				for (int j = 0; j < current.length(); j++) {
					if (current.charAt(j) == 'X') {
						this.addCreature(new Mushroom(this, new Point2D.Double(j * 20 + 10, i * 20 + 10)));
					}
					if (current.charAt(j) == 'H') {
						this.hero = new Hero(this, new Point2D.Double(j * 20 + 10, i * 20 + 10));
						// this.hero.setCenterPoint(new Point2D.Double(j * 20 +
						// 10, i * 20 + 10));
						this.addCreature(this.hero);
						if (this.level.getlevel() == 4) {
							this.generateBoss();
						} else {
							this.generateCentipede(j);
						}
					}
				}
			}
		} catch (FileNotFoundException exception1) {
			exception1.printStackTrace();
		} catch (IOException exception1) {
			exception1.printStackTrace();
		} finally {
			this.changeLock.unlock();
		}
	}

	// -------------------------------------------------------------------------
	// Temporal interface

	@Override
	public synchronized void timePassed() {
		if (!this.isPaused) {
			if (this.creatures == null) {
				return;
			}
			for (Temporal t : this.creatures) {
				t.timePassed();
			}
			this.isCollision();
		}
		if (!hasCentipede()) {
			this.level.increaselevel();
			if (this.level.getlevel() < 4) {
				this.renderLevel();
			}
		}
		this.changePlayer();
		this.creatures.removeAll(this.creaturesToRemove);
		this.creaturesToRemove.clear();
		this.creatures.addAll(this.creaturesToAdd);
		this.creaturesToAdd.clear();
	}

	@Override
	public void die() {
		// Ignored
	}

	@Override
	public void setIsPaused(boolean isPaused) {
		this.isPaused = isPaused;
	}

	@Override
	public boolean getIsPaused() {
		return this.isPaused;
	}

	// -------------------------------------------------------------------------
	// Drawable interface

	@Override
	public Color getColor() {
		return Color.BLACK;
	}

	@Override
	public Shape getShape() {
		return new Rectangle2D.Double(0, 0, this.width, this.height);
	}

	public boolean hasCentipede() {
		if (this.isBeginning) {
			this.isBeginning = false;
			return true;
		}
		for (Creature o : this.creatures) {
			if (o.getClassName().equals("Centipede"))
				return true;
		}
		return false;
	}

	public void setBegin(boolean a) {
		this.isBeginning = a;
	}

	@Override
	public BufferedImage getImage() {
		// TODO Auto-generated method stub.
		return null;
	}

	@Override
	public double getX() {
		// TODO Auto-generated method stub.
		return 0;
	}

	@Override
	public double getY() {
		// TODO Auto-generated method stub.
		return 0;
	}

	@Override
	public int getType() {
		// TODO Auto-generated method stub.
		return 0;
	}

}
