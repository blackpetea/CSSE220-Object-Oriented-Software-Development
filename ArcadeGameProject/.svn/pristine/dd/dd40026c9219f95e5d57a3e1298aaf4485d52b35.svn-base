import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.image.BufferedImage;
import java.util.List;

import javax.swing.JComponent;

/**
 * Renders a world of balls on the GUI.
 * 
 * @author Curt Clifton. Created Jan 22, 2011.
 */
public class GameComponent extends JComponent {

	private static final int FRAMES_PER_SECOND = 30;
	private static final long REPAINT_INTERVAL_MS = 1000 / FRAMES_PER_SECOND;

	private GameWorld world;

	/**
	 * Constructs a component for rendering the given game environment on the
	 * GUI.
	 * 
	 * @param world
	 */
	public GameComponent(GameWorld world) {
		this.world = world;

		// Creates a separate "thread of execution" to trigger periodic
		// repainting of this component.
		Runnable repainter = new Runnable() {
			@Override
			public void run() {
				// Periodically asks Java to repaint this component
				try {
					while (true) {
						Thread.sleep(REPAINT_INTERVAL_MS);
						repaint();
					}
				} catch (InterruptedException exception) {
					// Stop when interrupted
				}
			}
		};
		new Thread(repainter).start();
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;

		drawDrawable(g2, this.world,0);

		List<Drawable> drawableParts = this.world.getDrawableParts();
		for (Drawable d : drawableParts) {
			if(d.getType()==0){
				drawDrawable(g2, d,0);
			}
			if(d.getType()==1){
				drawDrawable(g2,d,1);
			}
			if (d.getType()==2) {
				drawDrawable(g2,d,2);
			}
		}
		
		g.setFont(new Font("Serif",Font.BOLD,32));
		g.setColor(Color.PINK);
		g.drawString(Integer.toString(this.world.getCurrentPlayer().getScore()), 380, 30);
		
		g.setFont(new Font("Serif",Font.BOLD,20));
		if (this.world.getCurrentPlayer().getNumber()==1) {
			g.drawString("Player 1", 10, 20);
		} else {
			g.drawString("Player 2", 10, 20);
		}
		g.drawString("Level "+Integer.toString(this.world.getlevel().getlevel()), 10, 40);
		g.drawString("Life "+Integer.toString(this.world.getCurrentPlayer().getLives()), 10, 60);
		
		if (this.world.getlevel().getlevel()==4) {
			if (this.world.getBOSS().isBOSSLiving()==false) {
				g.setFont(new Font("Serif",Font.BOLD,50));
				g.drawString("VICTORY", 130, 320);
				this.world.setIsPaused(true);
			}
		}
		if (this.world.isFail()) {
			g.setFont(new Font("Serif",Font.BOLD,50));
			g.drawString("GAME OVER", 130, 320);
			this.world.setIsPaused(true);
		}
	}

	/**
	 * This helper method draws the given drawable object on the given graphics
	 * area.
	 * 
	 * @param g2
	 *            the graphics area on which to draw
	 * @param d
	 *            the drawable object
	 */
	private void drawDrawable(Graphics2D g2, Drawable d,int i) {
		if(i==0){
			Color color = d.getColor();
			Shape shape = d.getShape();
			g2.setColor(color);
			g2.fill(shape);
		}
		if(i==1){
			BufferedImage img = d.getImage();
			g2.drawImage(img,(int)d.getX(),(int)d.getY(),20,20, null);
		}
		if (i==2) {
			BufferedImage img = d.getImage();
			g2.drawImage(img,(int)d.getX(),(int)d.getY(),100,100, null);
			
			Color color = d.getColor();
			Shape shape = d.getShape();
			g2.setColor(color);
			g2.fill(shape);
		}
		
	}

}
