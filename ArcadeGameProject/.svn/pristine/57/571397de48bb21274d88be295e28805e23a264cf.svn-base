import java.awt.Color;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;

import javax.imageio.ImageIO;

public class BOSS extends Creature {

	private double HP;
	private double MP;
	private GameWorld world;

	public BOSS(GameWorld world, Point2D centerPoint) {
		super(world, centerPoint);
		this.world = world;
		this.HP = 80;
		this.MP = 50;
		this.diameter = 100;
		this.speedx = 0;
		this.speedy = 0.5;
	}

	private void fireAP() {
		Point2D firePoint = this.getCenterPoint();
		firePoint = this.world.getHero().moveBy(firePoint, -60, 0);
		for (int i = -1; i < 2; i++) {
			firePoint = this.world.getHero().moveBy(firePoint, 30, 0);
			this.world.addCreature(new APBeam(this.world, firePoint, i, -1));
		}
	}

	private void fireShotgun() {
		Point2D firePoint = this.getCenterPoint();
		firePoint = this.world.getHero().moveBy(firePoint, -30, 0);
		for (int i = -2; i < 3; i++) {
			firePoint = this.world.getHero().moveBy(firePoint, 10, 0);
			this.world.addCreature(new Shotgun(this.world, firePoint, i, -1));
		}
	}
	
	public void setMovingLimit() {

		Point2D newPoint = this.moveBy(this.speedx, this.speedy);
		if (50 > newPoint.getX() || newPoint.getX() > 430) {
			newPoint = this.moveBy(newPoint, -speedx, 0);
		}
		if (50 > newPoint.getY() || newPoint.getY() > 550) {
			newPoint = this.moveBy(newPoint, 0, -speedy);
		}
		this.setCenterPoint(newPoint);
	}

	private void randomMotion() {
		Random myRandom = new Random();
		double dice = myRandom.nextDouble();
		if (dice >= 0.75) {
			this.speedx = myRandom.nextInt(3);
			this.speedy = myRandom.nextInt(3);
		} else if (dice >= 0.5) {
			this.speedx = -myRandom.nextInt(3);
			this.speedy = -myRandom.nextInt(3);
		} else if (dice >= 0.25) {
			this.speedx = myRandom.nextInt(3);
			this.speedy = -myRandom.nextInt(3);
		} else if (dice >= 0) {
			this.speedx = -myRandom.nextInt(3);
			this.speedy = myRandom.nextInt(3);
		}
		Double newX = this.getCenterPoint().getX() + this.speedx;
		Double newY = this.getCenterPoint().getY() + this.speedy;
		this.setCenterPoint(new Point2D.Double(newX, newY));

	}

	@Override
	public BufferedImage getImage() {
		try {
			return ImageIO.read(new File("Files\\BOSS.png"));
		} catch (IOException exception) {
		}
		return null;
	}

	@Override
	public double getX() {
		return this.getCenterPoint().getX() - this.diameter / 2;
	}

	@Override
	public double getY() {
		return this.getCenterPoint().getY() - this.diameter / 2;
	}

	@Override
	public int getType() {
		return 2;
	}

	@Override
	public void collide(Creature m) {
		m.collideWithBoss(this);

	}

	@Override
	public void collideWithMushroom(Mushroom m) {
		if (this.HP<50) {
			this.HP=this.HP+5;
		} else if (this.HP<80) {
			this.HP++;
		}
	}

	@Override
	public void collideWithCentipede(Centipede m) {

	}

	@Override
	public void collideWithHero(Hero m) {

	}

	@Override
	public void collideWithScorpion(Scorpion m) {
		if (this.HP<99) {
			this.HP++;
		}
	}

	@Override
	public void collideWithFleas(Fleas m) {
		if (this.HP<99) {
			this.HP++;
		}
	}

	@Override
	public void collideWithSpider(Spider m) {
		if (this.HP<99) {
			this.HP++;
		}
	}

	@Override
	public void collideWithBullet(Bullet m) {
		if (m.getDirection() > 0) {
			this.HP=this.HP-1;
		}
	}

	@Override
	public void collideWithAPBeam(APBeam m) {
		if (m.getDirection() > 0) {
			this.HP = this.HP - 10;
		}
	}

	@Override
	public void collideWithBoss(BOSS m) {

	}

	@Override
	public void updatePosition() {
		this.setMovingLimit();
		this.randomMotion();
	}

	@Override
	public void updateSize() {
		if (this.HP<1) {
			this.getWorld().getHero().addScore(20000);
			this.die();
		}
		if (this.HP < 100) {
			this.HP = this.HP + 0.002;
		}
		if (this.MP < 100) {
			this.MP = this.MP + 0.05;
		}
		//System.out.println(this.HP+"  "+this.MP);
	}

	@Override
	public void updateColor() {
		if ((int) this.MP == 50) {
			this.fireShotgun();
			this.MP++;
		} else if ((int) this.MP == 100) {
			this.fireAP();
			this.MP = this.MP - 99;
		}
	}

	@Override
	public double getDiameter() {
		return this.diameter;
	}

	@Override
	public String getClassName() {
		return "BOSS";
	}

	@Override
	public Color getColor() {
		return null;
	}
}
